#!/bin/bash
#
# Make an agents shar (agents-$BUILDSTAMP.sh) package.
#
# Examples:
#
#    # Build name "release-20110714", includes all agents by default.
#    # Source dir (-d) is a local path or a URL.
#    bin/mk-agents-shar -b release-20110714 \
#        -d https://guest:GrojhykMid@stuff.joyent.us/stuff/builds
# 
#    # Default build name is "master", default source dir is as above.
#    bin/mk-agents-shar
#
#    # Using built agent packages from a local "bits" dir.
#    bin/mk-agents-shar -b release-20110714 -d ../../bits
#    
#    # The HVM agents shar only includes some of the agents.
#    bin/mk-agents-shar -b hvm-master -d ../../bits \
#        agents/provisioner agents/heartbeater

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- config/globals

TOP=$(cd $(dirname $0)/; pwd)

DEFAULT_SOURCE_DIR=https://guest:GrojhykMid@stuff.joyent.us/stuff/builds
DEFAULT_BUILD_NAME=master
ALL_AGENTS=$(cat agents.json | ${TOP}/json -a | xargs)

BUILD_DIR=build

if [[ -z "$TIMESTAMP" ]]; then
    TIMESTAMP=$(date -u "+%Y%m%dT%H%M%SZ")
fi
# Need GNU awk for multi-char arg to "-F".
AWK=$((which gawk 2>/dev/null | grep -v "^no ") || which awk)
GITDESCRIBE=g$(git describe --all --long --dirty | ${AWK} -F'-g' '{print $NF}')

SHAR=${TOP}/shar
if [[ $(uname -s) == 'Linux' ]]; then
    SHAR=/usr/bin/shar
fi



#---- functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function usage() {
    if [[ -n "$1" ]]; then
        echo "error: $1"
        echo ""
    fi
    echo "Usage:"
    echo "  mk-agents-shar [OPTIONS] [AGENTS...]"
    echo ""
    echo "Options:"
    echo "  -h      print this help and exit"
    echo "  -b      build name, e.g. 'master' (the default), 'release-20110714'"
    echo "          Typically the name of the repo branch."
    echo "  -d      source dir, a local path or URL"
    echo "          (default is <$DEFAULT_SOURCE_DIR>)"
    echo "  -o      output directory to which to write results, default is 'build'"
    echo ""
    echo "Build an agents shar. Without any given 'AGENTS' strings all agents"
    echo "are included."
}


# Fetch the latest agent package matching the given name and buildname.
#
# Here "latest" is just a lexographical sort, so we are relying on agent
# package names to be sortable (currently that is acheived by using a
# ISO timestamp in the package names).
function fetch_agent_package() {
    local name=$1         # e.g. "ca/cabase"
    local build_name=$2   # e.g. "release-20110901" or "master"
    local from_dir=$3     # See example below.
    local to_dir=$4

    # E.g. "ca/cabase-master-20110728T214412Z-4d6102d.tar.gz"
    local dir=$(dirname $name)
    local base_pattern="^$(basename $name)-$build_name-.*"
    if [[ "${from_dir:0:7}" == "http://" || "${from_dir:0:8}" == "https://" ]]; then
        # URL 'from_dir' example:
        #   https://user:pass@stuff.joyent.us/stuff/builds
        # where name='ca/cabase' is at:
        #   https://user:pass@stuff.joyent.us/stuff/builds/ca/$branch-latest/ca/cabase-$branch-*
        local url_dir="${from_dir}/${dir}/${build_name}-latest/${dir}"
        local latest_name=$(curl -k -sS ${url_dir}/ \
            | grep "href=\"" \
            | cut -d'"' -f2 \
            | grep "${base_pattern}" \
            | sort | tail -1
            )
        if [[ -z "${latest_name}" ]]; then
            fatal "error: could not find '${base_pattern}' in '${url_dir}'"
        fi
        echo "Downloading '${url_dir}/${latest_name}' to '${to_dir}'."
        (cd $to_dir && curl --fail --connect-timeout 10 --progress-bar -k -O ${url_dir}/${latest_name})
    else
        # Local bits dir 'from_dir' example:
        #   /home/jill/joy/mountain-gorilla/bits
        # where name='ca/cabase' is at:
        #   /home/jill/joy/mountain-gorilla/bits/ca/cabase-$branch-*
        local latest_name=$(ls -1 ${from_dir}/${dir}/ | grep "${base_pattern}" | sort | tail -1)
        if [[ -z "${latest_name}" ]]; then
            fatal "error: could not find '${base_pattern}' in '${from_dir}/${dir}'"
        fi
        local latest_path="${from_dir}/${dir}/${latest_name}"
        echo "Copying '${latest_path}' to '${to_dir}'."
        cp ${latest_path} ${to_dir}
    fi
}

function mk_agents_shar() {
    local agents="$1"
    local build_name=$2
    local source_dir="$3"
    local output_dir="$4"
    echo "Make '$build_name' agents shar (timestamp $TIMESTAMP) from '${source_dir}'."

    # Get all the agents files and boilerplate into the build dir.
    local build_dir=$BUILD_DIR/agents
    rm -rf $build_dir
    mkdir -p $build_dir
    cp install.sh $build_dir
    for agent in $agents; do
        fetch_agent_package $agent $build_name $source_dir $build_dir
    done

    # Create the shar.
    local tmp=/var/tmp
    local sh_filename=agents-$build_name-$TIMESTAMP-$GITDESCRIBE.sh
    cd $BUILD_DIR

    (cat <<__EOF__
#!/bin/sh
if [ \`pwd\` != '$tmp' ]; then
  cd $tmp
fi
__EOF__
)> $sh_filename

    (${SHAR} -D -n "Joyent" agents | grep -v '^exit 0'; cat <<EOF

if [[ -f agents/install.sh ]]; then
    (cd agents && /bin/bash ./install.sh)
fi

# Delete agents directory.
rm -fr agents

exit 0
EOF
)>> $sh_filename

    # Create the md5sums file.
    local md5sum_filename=agents-$build_name-$TIMESTAMP-$GITDESCRIBE.md5sum
    md5sum $sh_filename | cut -d' ' -f 1 > $md5sum_filename

    # Copy bits to output dir, if necessary.
    cd $TOP
    if [[ "$output_dir" != "$BUILD_DIR" ]]; then
        cp $BUILD_DIR/$sh_filename $output_dir/
        cp $BUILD_DIR/$md5sum_filename $output_dir/
    fi
    echo "Created '$output_dir/$sh_filename'."
    echo "Created '$output_dir/$md5sum_filename'."
}



#---- mainline

# Process arguments.
build_name=$DEFAULT_BUILD_NAME
source_dir=$DEFAULT_SOURCE_DIR
output_dir=$BUILD_DIR
while getopts "hb:d:o:" c; do
    case "$c" in
    h)
        usage
        exit 0
        ;;
    b)
        build_name=$OPTARG
        ;;
    d)
        source_dir=$OPTARG
        ;;
    o)
        output_dir=$OPTARG
        ;;
    *)
        usage "illegal option -- $OPTARG"
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

agents="$*"
if [[ -z "$agents" ]]; then
    agents="$ALL_AGENTS"
fi

mk_agents_shar "$agents" $build_name "$source_dir" "$output_dir"
exit $?

